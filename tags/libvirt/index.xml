<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Libvirt on 整点Bug</title>
    <link>https://www.typesafe.cn/tags/libvirt/</link>
    <description>Recent content in Libvirt on 整点Bug</description>
    <image>
      <title>整点Bug</title>
      <url>https://www.typesafe.cn/papermod-cover.png</url>
      <link>https://www.typesafe.cn/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.148.0</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 19 May 2021 20:18:20 +0800</lastBuildDate>
    <atom:link href="https://www.typesafe.cn/tags/libvirt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用libvirt-java采集KVM虚拟机状态信息</title>
      <link>https://www.typesafe.cn/posts/collect-vm-stats-by-libvirt-java/</link>
      <pubDate>Wed, 19 May 2021 20:18:20 +0800</pubDate>
      <guid>https://www.typesafe.cn/posts/collect-vm-stats-by-libvirt-java/</guid>
      <description>&lt;p&gt;虚拟化开发相较于普通开发是一个冷门的方向，大多数是使用Python开发，其中使用Java来做虚拟化的少之又少，资料更是少的可怜，为了实现需求我也是踩了不少坑，今天就为大家分享一下如何使用 &lt;code&gt;libvirt-java&lt;/code&gt; 来采集KVM虚拟机的资源使用信息。&lt;/p&gt;
&lt;h3 id=&#34;cpu使用率&#34;&gt;CPU使用率&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;libvirt&lt;/code&gt;并没有直接提供获取虚拟机CPU使用率的接口，需要我们自己来计算，网上分享的代码或者公式五花八门，大部分都是错误的，经过我的测试，找到了一个相对准确的计算公式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cpu_usage = (cpu_time_now - cpu_time_t_second_ago) * 100 / (t * vCpus * 10^9)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Java代码如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// t秒前的CPU时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; domain.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInfo&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;cpuTime&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 当前CPU时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; domain.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInfo&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;cpuTime&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 虚拟CPU数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; vCpus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; domain.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMaxVcpus&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// t 为1秒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Double cpuUsage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 100 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (c2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c1) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vCpus &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;pow&lt;/span&gt;(10, 9));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;虚拟机[{}]CPU使用率为: {}&amp;#34;&lt;/span&gt;, uuid, cpuUsage);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;内存使用率&#34;&gt;内存使用率&lt;/h3&gt;
&lt;p&gt;不要使用&lt;code&gt;domain.getInfo()&lt;/code&gt;返回的 &lt;code&gt;memory&lt;/code&gt;字段，虽然它注释写的是&lt;code&gt;the memory in KBytes used by the domain&lt;/code&gt;，但它的意思真的不是虚拟机内部进程已使用的内存大小，而是从宿主机器的角度来看分配给这个虚拟机的内存它使用了多少，如果没有特殊配置，它会和&lt;code&gt;maxMem&lt;/code&gt;字段的值是相同的。&lt;/p&gt;
&lt;p&gt;正确做法是使用&lt;code&gt;domain.memoryStats(10)&lt;/code&gt;来获取，那为什么参数要输入一个&lt;code&gt;10&lt;/code&gt;呢？这是因为&lt;code&gt;10&lt;/code&gt;代表的是要返回的信息数量，经过我手动执行&lt;code&gt;virsh dommemstat uuid&lt;/code&gt; 测试发现有10个参数返回，所以需要填入&lt;code&gt;10&lt;/code&gt;。另外命令返回的&lt;code&gt;unused&lt;/code&gt; 字段值与数组中&lt;code&gt;tag=8&lt;/code&gt;的数据一致，最终我们获取到了未使用的内存大小，计算内存使用率更是轻轻松松。&lt;/p&gt;
&lt;p&gt;Java代码如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MemoryStatistic&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; memoryStatistics &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; domain.&lt;span style=&#34;color:#a6e22e&#34;&gt;memoryStats&lt;/span&gt;(10);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MemoryStatistic&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Arrays.&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;(memoryStatistics).&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; x.&lt;span style=&#34;color:#a6e22e&#34;&gt;getTag&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 8).&lt;span style=&#34;color:#a6e22e&#34;&gt;findFirst&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (first.&lt;span style=&#34;color:#a6e22e&#34;&gt;isPresent&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MemoryStatistic memoryStatistic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; unusedMemory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; memoryStatistic.&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; maxMemory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; domain.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMaxMemory&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; memoryUsage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (maxMemory &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; unusedMemory) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 100.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; maxMemory;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;虚拟机[{}]内存使用率为: {}&amp;#34;&lt;/span&gt;, uuid, memoryUsage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;网卡数据包信息&#34;&gt;网卡数据包信息&lt;/h3&gt;
&lt;p&gt;同样&lt;code&gt;libvirt&lt;/code&gt;并没有提供获取虚拟机网卡的接口，因此需要获取虚拟机的xml文件来查询。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
