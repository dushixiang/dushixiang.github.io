<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tool on 整点Bug</title>
    <link>https://www.typesafe.cn/categories/tool/</link>
    <description>Recent content in Tool on 整点Bug</description>
    <image>
      <title>整点Bug</title>
      <url>https://www.typesafe.cn/papermod-cover.png</url>
      <link>https://www.typesafe.cn/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.148.0</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 19 Nov 2020 22:33:00 +0000</lastBuildDate>
    <atom:link href="https://www.typesafe.cn/categories/tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>服务器不允许上网并且需要跳板机才能访问？学会使用这个工具，轻松让服务器使用yum。</title>
      <link>https://www.typesafe.cn/posts/4dnat/</link>
      <pubDate>Thu, 19 Nov 2020 22:33:00 +0000</pubDate>
      <guid>https://www.typesafe.cn/posts/4dnat/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;你是否遇到过这样的场景，服务器不能上网，但是又需要安装某个软件，面对如蛛网般杂乱的rpm包依赖关系，放弃或许是最好的选择，这样你就不必再为无法完成工作而痛苦又懊恼。&lt;/p&gt;
&lt;p&gt;但是今天，你有了一个更好的选择。&lt;/p&gt;
&lt;h1 id=&#34;4dnat&#34;&gt;&lt;a href=&#34;https://github.com/dushixiang/4dnat&#34;&gt;4DNAT&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;4DNAT取名源自4和DNAT。这个工具工作在OSI模型的第四层传输层，同时4和for谐音，意为专门为目标地址转换而服务的工具。4DNAT使用go语言开发，具有天然的跨平台性，并且完全使用go标准库开发，没有任何的第三方依赖，编译之后只有一个二进制可执行文件。它有4种工作模式：&lt;/p&gt;
&lt;h3 id=&#34;转发模式&#34;&gt;转发模式&lt;/h3&gt;
&lt;p&gt;接受两个参数，监听端口和目标地址，在监听端口接收到请求后会主动连接目标地址，示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -forward &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt; 192.168.1.100:22
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;监听模式&#34;&gt;监听模式&lt;/h3&gt;
&lt;p&gt;接受两个参数，监听端口1和监听端口2，并交换两个端口接收到的数据，示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -listen &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;代理人模式&#34;&gt;代理人模式&lt;/h3&gt;
&lt;p&gt;接受两个参数，目标地址1和目标地址2，启动后会主动连接这两个目标地址，并交换两个端口接收到的数据，示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -agent 127.0.0.1:10000 127.0.0.1:22
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;httphttps代理模式&#34;&gt;http/https代理模式&lt;/h3&gt;
&lt;p&gt;接受两个参数或四个参数，代理类型、监听端口、证书路径和私钥路径，示例：&lt;/p&gt;
&lt;h4 id=&#34;http代理&#34;&gt;http代理&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -proxy http &lt;span style=&#34;color:#ae81ff&#34;&gt;1080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;https代理&#34;&gt;https代理&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -proxy https &lt;span style=&#34;color:#ae81ff&#34;&gt;1080&lt;/span&gt; server.crt server.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;使用场景&#34;&gt;使用场景&lt;/h1&gt;
&lt;h3 id=&#34;场景一&#34;&gt;场景一&lt;/h3&gt;
&lt;p&gt;期望可以在&lt;strong&gt;用户电脑&lt;/strong&gt;上直接访问目标服务器上的3306端口，跳板机器是一台Windows机器，没办法做ssh端口转发。
&lt;img alt=&#34;请输入图片描述&#34; loading=&#34;lazy&#34; src=&#34;https://oss.typesafe.cn/break-through-the-network.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单向虚线箭头表示可以单向访问，反之不行。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;使用4DNAT在&lt;strong&gt;跳板机器&lt;/strong&gt;上执行如下命令做端口转发&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 本地监听3307端口，接收到请求后主动连接10.1.0.40的3306端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -forward &lt;span style=&#34;color:#ae81ff&#34;&gt;3307&lt;/span&gt; 10.1.0.40:3306
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;strong&gt;用户电脑&lt;/strong&gt;上访问&lt;strong&gt;172.16.0.30:3307&lt;/strong&gt;即等同于访问&lt;strong&gt;10.1.0.40:3306&lt;/strong&gt;，于是就可以在&lt;strong&gt;用户电脑&lt;/strong&gt;愉快的访问&lt;strong&gt;目标机器&lt;/strong&gt;上的服务啦。&lt;/p&gt;
&lt;h3 id=&#34;场景二&#34;&gt;场景二&lt;/h3&gt;
&lt;p&gt;期望目标&lt;strong&gt;目标机器&lt;/strong&gt;可以上网，如使用yum安装软件。
&lt;img alt=&#34;请输入图片描述&#34; loading=&#34;lazy&#34; src=&#34;https://oss.typesafe.cn/break-through-the-network2.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;strong&gt;用户电脑&lt;/strong&gt;上开启一个http代理&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -proxy http &lt;span style=&#34;color:#ae81ff&#34;&gt;1080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在&lt;strong&gt;跳板机器&lt;/strong&gt;上使用监听模式监听两个端口，用于交换数据&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -listen &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在&lt;strong&gt;目标机器&lt;/strong&gt;上使用监听模式监听两个端口，用于交换数据&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -listen &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;在&lt;strong&gt;用户电脑&lt;/strong&gt;上使用代理人模式主动连接两个目标地址，用于交换数据&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -agent 127.0.0.1:1080 172.16.0.30:10000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;在&lt;strong&gt;跳板机器&lt;/strong&gt;上使用代理人模式主动连接两个目标地址，用于交换数据&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./4dnat -agent 127.0.0.1:10001 10.1.0.40:20000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;在&lt;strong&gt;目标机器&lt;/strong&gt;上修改代理&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; /etc/profile
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;http_proxy=http://127.0.0.1:20001
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https_proxy=http://127.0.0.1:20001
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export http_proxy https_proxy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source /etc/profile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;在&lt;strong&gt;目标机器&lt;/strong&gt;上测试访问互联网&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl https://typesafe.cn
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后奉上项目地址 &lt;a href=&#34;https://github.com/dushixiang/4dnat&#34;&gt;https://github.com/dushixiang/4dnat&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker？Vmware？小孩子才做选择，打工人我全都要。</title>
      <link>https://www.typesafe.cn/posts/vctl/</link>
      <pubDate>Tue, 17 Nov 2020 15:39:00 +0000</pubDate>
      <guid>https://www.typesafe.cn/posts/vctl/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;作为一个称职的打工人，电脑上常备一个Vmware不是什么新鲜事了，但是它和Docker for Windows不兼容往往很让人头大。通过查找资料，发现提供的解决方案大致有三种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先使用Vmware创建一台Linux虚拟机，在这台Linux虚拟机上再安装docker。&lt;/li&gt;
&lt;li&gt;配置Vmware作为Docker for Windows的运行平台。&lt;/li&gt;
&lt;li&gt;使用微软的Hyper-v来创建虚拟机。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对我而言，第一种不太优雅，第二种配置繁琐，第三种不会用。&lt;/p&gt;
&lt;p&gt;直到我发现了vctl这个好东西。&lt;/p&gt;
&lt;h1 id=&#34;vctl-是什么&#34;&gt;vctl 是什么？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;vctl 是一款捆绑在Vmware Workstation Pro 应用程序中的命令行实用程序，仅在 Windows 10 1809 或更高版本上受支持。如果 Workstation Pro 所在主机上的 Windows 操作系统低于 Windows 10 1809，则它不支持 vctl CLI。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;简单来说它就是Vmware上的一个工具，可以用它来管理容器，使用命令基本上和docker一致，只需要把&lt;code&gt;docker &amp;lt;cmd&amp;gt;&lt;/code&gt;换成&lt;code&gt;vctl &amp;lt;cmd&amp;gt;&lt;/code&gt;就足够了。Docker for Windows？不需要。现在容器都交给vctl来管理了。&lt;/p&gt;
&lt;p&gt;在使用vctl命令前，和启动docker一样，需要先启动vctl的守护进程。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vctl system start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当需要关闭守护进程时执行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vctl system stop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来就是和普通的docker命令一样了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 拉取镜像
vctl pull nginx

# 查看镜像
vctl images

# 启动容器
vctl --name some-nginx -d -p 8080:80 nginx

# 查看容器
vctl ps

# 进入容器
vctl exec -it &amp;lt;cid&amp;gt; bash 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更多使用信息可参考Vmware的官方文档 &lt;a href=&#34;https://docs.vmware.com/cn/VMware-Fusion/11/com.vmware.fusion.using.doc/GUID-78E7339F-7294-4F3E-9AD0-1E14C201FA40.html&#34;&gt;使用vctl命令管理容器&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>tcpkill在go语言下的实现和增强</title>
      <link>https://www.typesafe.cn/posts/tcpwall/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://www.typesafe.cn/posts/tcpwall/</guid>
      <description>&lt;h2 id=&#34;tcpwall&#34;&gt;tcpwall&lt;/h2&gt;
&lt;p&gt;当我们想要阻止某些TCP连接的建立，在Linux平台上有一个很好的解决方案&lt;strong&gt;iptables&lt;/strong&gt;，但是对那些已经建立的tcp连接，iptables就不能做到随心所欲的阻断了。&lt;/p&gt;
&lt;p&gt;我在互联网上检索的时候发现了&lt;strong&gt;tcpkill&lt;/strong&gt;这个工具，tcpkill是一个网络分析工具集&lt;strong&gt;dsniff&lt;/strong&gt;中的一个小工具。在Linux上可以直接通过dsniff包安装，使用方式也非常简单。&lt;/p&gt;
&lt;p&gt;通过测试我发现tcpkill在执行命令之后并不会立刻阻断tcp连接，而是等待有数据传输时，才会阻断，因此在执行完命令之后程序并不会主动退出，而是需要通过&lt;em&gt;&lt;strong&gt;Ctrl+C&lt;/strong&gt;&lt;/em&gt;来退出，这对于某些想要通过程序来调用的脚本小子（例如我）来说简直是个灾难。&lt;/p&gt;
&lt;h2 id=&#34;如何阻断一个已经建立的tcp连接&#34;&gt;如何阻断一个已经建立的tcp连接？&lt;/h2&gt;
&lt;p&gt;阻断一个已经建立的tcp连接通常有这几种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务端主动断开&lt;/li&gt;
&lt;li&gt;客户端主动断开&lt;/li&gt;
&lt;li&gt;拔掉网线（时间要超过tcp超时时间）&lt;/li&gt;
&lt;li&gt;伪造RST数据包发送给服务端和客户端让它们主动断开（tcpkill就是这么做的）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前三种局限性太大，只能用第4种了。&lt;/p&gt;
&lt;h2 id=&#34;如何实现伪造rst数据报文包&#34;&gt;如何实现伪造RST数据报文包？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/gopacket&#34;&gt;GoPacket&lt;/a&gt; 是go基于&lt;strong&gt;libpcap&lt;/strong&gt;构建的一个库，可以通过旁路的方式接收一份数据包的拷贝。因此我们可以很方便捕获到正在通信的tcp数据报文。通过数据报文，我们可以获取到通信双方的MAC地址，IP和端口号，以及ACK号等，这些都是伪造数据包必不可少的。&lt;/p&gt;
&lt;p&gt;在学习了&lt;strong&gt;tcpkill&lt;/strong&gt;的源码之后，我使用go开发了一个增强版的&lt;strong&gt;tcpwall&lt;/strong&gt;，&lt;strong&gt;tcpwall&lt;/strong&gt;不仅可以实现和&lt;strong&gt;tcpkill&lt;/strong&gt;同样的基于ip或端口监听到指定数据报文之后伪造RST数据报文来阻断tcp连接，也可以通过源ip源端口，目的ip目的端口来主动发送SYN数据报文包来诱导那些没有数据的tcp连接发送ACK数据报文包以获取源MAC、目的MAC和ACK号，并且可以通过指定参数让程序等待一段时间后主动退出。&lt;/p&gt;
&lt;h2 id=&#34;如何使用&#34;&gt;如何使用&lt;/h2&gt;
&lt;p&gt;阻断指定IP和端口的TCP连接（不关心是源或者目的）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcpwall -i &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;interface&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -host &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;host&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -port &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;port&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;阻断指定源IP和源端口的TCP连接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcpwall -i &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;interface&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -shost &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src_host&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -sport &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src_port&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;阻断指定目的IP和目的端口的TCP连接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcpwall -i &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;interface&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -dhost &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;dst_host&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -dport &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;dst_port&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;阻断指定源IP、源端口、目的IP、目的端口的TCP连接（会主动向双方发送SYN数据报文包）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcpwall -i &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;interface&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -shost &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src_host&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -sport &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src_port&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -dhost &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;dst_host&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; -dport &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;dst_port&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;-timeout 时间（秒）指定等待多久之后退出程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目地址 &lt;a href=&#34;https://github.com/dushixiang/tcpwall&#34;&gt;https://github.com/dushixiang/tcpwall&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
