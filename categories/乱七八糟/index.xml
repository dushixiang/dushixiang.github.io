<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>乱七八糟 on 我在对面的角落</title>
    <link>http://www.example.com/categories/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/</link>
    <description>Recent content in 乱七八糟 on 我在对面的角落</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 11 Jan 2021 15:40:41 +0000</lastBuildDate><atom:link href="http://www.example.com/categories/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 修改最大文件描述符</title>
      <link>http://www.example.com/posts/35/</link>
      <pubDate>Mon, 11 Jan 2021 15:40:41 +0000</pubDate>
      
      <guid>http://www.example.com/posts/35/</guid>
      <description>echo &amp;#34;fs.file-max=655350&amp;#34; &amp;gt;&amp;gt;/etc/sysctl.conf echo &amp;#34;* soft nofile 655350&amp;#34; &amp;gt;&amp;gt; /etc/security/limits.conf echo &amp;#34;* hard nofile 655350&amp;#34; &amp;gt;&amp;gt; /etc/security/limits.conf ulimit -n 655350 </description>
    </item>
    
    <item>
      <title>服务器不允许上网并且需要跳板机才能访问？学会使用这个工具，轻松让服务器使用yum。</title>
      <link>http://www.example.com/posts/24/</link>
      <pubDate>Thu, 19 Nov 2020 22:33:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/24/</guid>
      <description>前言    你是否遇到过这样的场景，服务器不能上网，但是又需要安装某个软件，面对如蛛网般杂乱的rpm包依赖关系，放弃或许是最好的选择，这样你就不必再为无法完成工作而痛苦又懊恼。
但是今天，你有了一个更好的选择。
4DNAT    4DNAT取名源自4和DNAT。这个工具工作在OSI模型的第四层传输层，同时4和for谐音，意为专门为目标地址转换而服务的工具。4DNAT使用go语言开发，具有天然的跨平台性，并且完全使用go标准库开发，没有任何的第三方依赖，编译之后只有一个二进制可执行文件。它有4种工作模式：
转发模式    接受两个参数，监听端口和目标地址，在监听端口接收到请求后会主动连接目标地址，示例：
./4dnat -forward 2222 192.168.1.100:22 监听模式    接受两个参数，监听端口1和监听端口2，并交换两个端口接收到的数据，示例：
./4dnat -listen 10000 10001 代理人模式    接受两个参数，目标地址1和目标地址2，启动后会主动连接这两个目标地址，并交换两个端口接收到的数据，示例：
./4dnat -agent 127.0.0.1:10000 127.0.0.1:22 http/https代理模式    接受两个参数或四个参数，代理类型、监听端口、证书路径和私钥路径，示例：
http代理    ./4dnat -proxy http 1080 https代理    ./4dnat -proxy https 1080 server.crt server.key 使用场景    场景一    期望可以在用户电脑上直接访问目标服务器上的3306端口，跳板机器是一台Windows机器，没办法做ssh端口转发。  单向虚线箭头表示可以单向访问，反之不行。</description>
    </item>
    
    <item>
      <title>Docker？Vmware？小孩子才做选择，打工人我全都要。</title>
      <link>http://www.example.com/posts/19/</link>
      <pubDate>Tue, 17 Nov 2020 15:39:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/19/</guid>
      <description>前言    作为一个称职的打工人，电脑上常备一个Vmware不是什么新鲜事了，但是它和Docker for Windows不兼容往往很让人头大。通过查找资料，发现提供的解决方案大致有三种
 先使用Vmware创建一台Linux虚拟机，在这台Linux虚拟机上再安装docker。 配置Vmware作为Docker for Windows的运行平台。 使用微软的Hyper-v来创建虚拟机。  对我而言，第一种不太优雅，第二种配置繁琐，第三种不会用。
直到我发现了vctl这个好东西。
vctl 是什么？     vctl 是一款捆绑在Vmware Workstation Pro 应用程序中的命令行实用程序，仅在 Windows 10 1809 或更高版本上受支持。如果 Workstation Pro 所在主机上的 Windows 操作系统低于 Windows 10 1809，则它不支持 vctl CLI。
 简单来说它就是Vmware上的一个工具，可以用它来管理容器，使用命令基本上和docker一致，只需要把docker &amp;lt;cmd&amp;gt;换成vctl &amp;lt;cmd&amp;gt;就足够了。Docker for Windows？不需要。现在容器都交给vctl来管理了。
在使用vctl命令前，和启动docker一样，需要先启动vctl的守护进程。
vctl system start 当需要关闭守护进程时执行
vctl system stop 接下来就是和普通的docker命令一样了。
# 拉取镜像 vctl pull nginx # 查看镜像 vctl images # 启动容器 vctl --name some-nginx -d -p 8080:80 nginx # 查看容器 vctl ps # 进入容器 vctl exec -it &amp;lt;cid&amp;gt; bash 更多使用信息可参考Vmware的官方文档 使用vctl命令管理容器</description>
    </item>
    
  </channel>
</rss>
