<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Open vSwitch on 没有理想的人不伤心</title>
    <link>http://www.example.com/categories/open-vswitch/</link>
    <description>Recent content in Open vSwitch on 没有理想的人不伤心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 30 Dec 2020 19:14:00 +0000</lastBuildDate><atom:link href="http://www.example.com/categories/open-vswitch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Open vSwitch 入门实践（6）VXLAN实验</title>
      <link>http://www.example.com/posts/ovs-learn-6/</link>
      <pubDate>Wed, 30 Dec 2020 19:14:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/ovs-learn-6/</guid>
      <description>什么是VXLAN？    VXLAN是一种隧道封装协议，在三层网络上封装二层网络数据报文。简单来说就是可以在已经规划好网络拓扑的设备上封装出一个新的二层网络，因此VXLAN这类网络又被称之为overylay网络，底下承载VXLAN网络的就被称之为underlay网络。
VXLAN解决了什么问题？    最近几年，阿里云，腾讯云，京东云，华为云等等厂商每到节日都会打折出售大量云服务器，1核1G内存50G磁盘的服务器几十块就能买到一年的使用权，作为一个专业的羊毛党，哪个手里没有几台小破水管机器？但是这么多的云服务器是厂商如何做隔离的呢？了解过网络的同学或许会说VLAN。但是VLAN这种只能隔离4094个虚拟网络的技术别说满足不了羊毛党了，就连正常的用户估计都撑不住。那不隔离能行吗，厂商规划一个特别大的网段，让大家都在这里面耍，正常用户还好，万一这个时候进来一个大黑客，估计就会全部GG。
因此，隔离是必不可少的，其中关键的技术就是overlay网络。
那VXLAN具体解决了哪些问题呢？
 突破了VLAN技术4094个隔离网络的限制，在一个管理域中创建多达1600万个VXLAN网络。 VXLAN提供了云服务厂商所需的规模的网络分段，以支持大量租户。 突破了物理网络边界的限制，传统虚拟二层网络（VLAN）是需要和物理网络做大量适配工作才能保证环境的迁移不会导致虚拟网络异常，overlay网络则不必关心底层物理网络是如何搭建的，只要能保证VXLAN端点相互之间可以联通即可。  VXLAN网络如何工作？    VXLAN隧道协议将二层以太网帧封装在三层UDP数据包中，使用户能够创建跨物理三层网络的虚拟化二层子网或网段。每个二层子网使用VXLAN网络标识符（VNI）作为唯一标识。报文格式如下图：
执行数据包封装和解封装的实体称为VXLAN隧道终结点（VTEP）。VTEP主要分为两类：硬件VTEP和软件VTEP。硬件VTEP我接触较少，这里就不再介绍了。
软件VTEP如下图所示：VTEP在数据包到达虚拟机之前进行了封装和解封装，使得虚拟机完全不需要知道VXLAN隧道以及它们之间的三层网络。
简单VXLAN实验    我们参照下图完成实验。
主机A    # 创建隧道网桥 ovs-vsctl add-br br-tun # 创建隧道端口并指定远端IP和VXLAN ID ovs-vsctl add-port br-tun vx01 -- set Interface vx01 type=vxlan options:remote_ip=192.168.123.232 options:key=1111 # 创建内部端口 ovs-vsctl add-port br-tun vnet0 -- set Interface vnet0 type=internal # 创建netns用于模拟虚拟网络设备 ip netns add ns0 # 将内部端口移动到netns中 ip link set vnet0 netns ns0 # 启动网卡 ip netns exec ns0 ip link set lo up ip netns exec ns0 ip link set vnet0 up # 配置IP ip netns exec ns0 ip addr add 192.</description>
    </item>
    
    <item>
      <title>Open vSwitch 入门实践（5）OVS Flow Table 流表规则</title>
      <link>http://www.example.com/posts/ovs-learn-5/</link>
      <pubDate>Tue, 29 Dec 2020 18:38:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/ovs-learn-5/</guid>
      <description>OpenvSwitch flow table 流表     OpenFlow（OF）被认为是第一个软件定义网络（SDN）标准之一。它最初在SDN环境中定义了通信协议，使SDN控制器能够与物理和虚拟的交换机和路由器等网络设备的转发平面直接进行交互，从而更好地适应不断变化的业务需求。
 如果把OpenFlow控制器比作“大脑”，OVS流表就像是“大腿”一样接受来自“大脑”的指令，决定要向哪个方向前进。但OVS流表功能更加强大，在没有OpenFlow控制器时，也可以自主工作，它本身也供一些命令让我们可以直接管理流表。
操作命令    查看流表规则    # 查看br-tun上的全部流表规则 ovs-ofctl dump-flows br-tun 添加或修改流表规则    ovs-ofctl add−flow／add−flows／mod−flows “流表匹配条件,actions=[动作1][,动作2…]” 如果你有过编程的经验，流表规则其实就是一个个简单的if语句，伪代码如下。
if (流表匹配条件){ 动作1， 动作2... } if (流表匹配条件){ 动作1， 动作2... } 删除流表规则    # 删除br-tun上的全部流表规则 ovs-ofctl del-flows br-tun # 删除br-tun上匹配xx的全部流表规则 ovs-ofctl del-flows br-tun xx 流表匹配条件    OVS 流表匹配条件较多，下面我将其分成四部分来说明，分别是:
 OVS匹配条件 OSI模型第二层【数据链路层】 OSI模型第三层【网络层】 OSI模型第四层【传输层】  OVS匹配条件    in_port=port    流量进入的端口编号或者名称，示例 in_port=br-int</description>
    </item>
    
    <item>
      <title>Open vSwitch 入门实践（4）使用OVS配置端口镜像</title>
      <link>http://www.example.com/posts/ovs-learn-4/</link>
      <pubDate>Mon, 28 Dec 2020 19:23:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/ovs-learn-4/</guid>
      <description>前言    当我们想要在不影响虚拟网络设备数据报文收发的情况下获取对应虚拟网络设备的流量时，端口镜像是一个很好的选择。端口镜像是指将经过指定端口（镜像端口）的报文复制一份到另一个指定端口（观察端口），通过观察端口接收到的数据报文，就可以有效识别虚拟网络的运行情况。
OVS提供了相关命令来配置或删除端口镜像，下面我们来实验一下。
如何使用    端口镜像类型    端口镜像分为镜像源和镜像目的两部分。
镜像源     select_all：布尔类型（true，false）。设置为 true 时，表示此网桥上的所有流量。 select_dst_port：字符串（端口名称）。表示此端口接收的所有流量。 select_src_port：字符串（端口名称）。表示此端口发送的所有流量。 select_vlan：整形（0-4095）。表示携带此VLAN标签的流量。  镜像目的     output_port：字符串（端口名称）。接收流量报文的观察端口。 output_vlan：整形（0-4095）。表示只修改VLAN标签，原VLAN标签会被剥离。  基础操作命令    新增端口镜像
ovs-vsctl -- set Bridge &amp;lt;bridge_name&amp;gt; mirrors=@m \  -- --id=@&amp;lt;port0&amp;gt; get Port &amp;lt;port0&amp;gt; \  -- --id=@&amp;lt;port1&amp;gt; get Port &amp;lt;port1&amp;gt; \  -- --id=@m create Mirror name=&amp;lt;mirror_name&amp;gt; select-dst-port=@&amp;lt;port0&amp;gt; select-src-port=@&amp;lt;port0&amp;gt; output-port=@&amp;lt;port1&amp;gt;  这行命令会输出一个镜像ID</description>
    </item>
    
    <item>
      <title>Open vSwitch 入门实践（3）使用OVS构建分布式隔离网络</title>
      <link>http://www.example.com/posts/ovs-learn-3/</link>
      <pubDate>Sun, 27 Dec 2020 11:38:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/ovs-learn-3/</guid>
      <description>使用OVS构建分布式隔离网络    前言    上一节我们使用OVS构建了单机隔离网络，但是随着网络规模的扩张，单节点已经不再能满足业务的需要，分布式网络成了必不可少的环节。分布式网络与单节点网络在细节实现上基本一致，只有物理环境网络连线上的一点区别。
实验1：分布式无隔离网络    网络拓扑如下图所示，我们每一台节点都有两张网卡，一张用于管理，一张用于业务。之所以使用两张网卡有两个原因：
 管理网卡用于日常的维护登录，业务网卡用于传输虚拟节点的数据报文，避免相互之间影响。 我们要将业务网卡绑定到OVS网桥上，也就是Normal类型的Port。这种方式添加的Port不支持分配IP地址，如果之前网卡上配置的有IP，挂载到OVS上面之后将不可访问。   需要注意的是，如果是使用物理环境搭建网络拓扑，需要把业务网卡对应的交换机端口配置为trunk模式。如果是使用VmWare搭建网络拓扑，业务网卡需要配置网络类型为仅主机模式。
 配置     配置环境 主机A  ovs-vsctl add-br br-int # 请修改eth1为当前实验环境的业务网卡名称 ovs-vsctl add-port br-int eth1 # 添加两个内部端口 ovs-vsctl add-port br-int vnet0 -- set Interface vnet0 type=internal ovs-vsctl add-port br-int vnet1 -- set Interface vnet1 type=internal # 添加两个netns ip netns add ns0 ip netns add ns1 # 将内部端口分别移动到netns中 ip link set vnet0 netns ns0 ip link set vnet1 netns ns1 # 启动端口并配置IP ip netns exec ns0 ip link set lo up ip netns exec ns0 ip link set vnet0 up ip netns exec ns0 ip addr add 10.</description>
    </item>
    
    <item>
      <title>Open vSwitch 入门实践（2）使用OVS构建隔离网络</title>
      <link>http://www.example.com/posts/ovs-learn-2/</link>
      <pubDate>Thu, 26 Nov 2020 22:55:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/ovs-learn-2/</guid>
      <description>前言    在前面我们已经使用Linux Bridge完成了多台网络设备的通信，但是它对于网络隔离的支持不是很好，长期以来，在Linux平台上缺少一个功能完备的虚拟交换机，直到OVS的出现。
实验    接下来我们来尝试完成两个实验，单机无隔离网络、单机隔离网络。
实验一：单机无隔离网络    使用ovs构建无隔离网络非常简单，只需要添加一个网桥，然后在这个网桥上再增加几个内部端口，最后把端口移动到netns中即可。
# 添加网桥 ovs-vsctl add-br br-int # 添加三个内部端口 ovs-vsctl add-port br-int vnet0 -- set Interface vnet0 type=internal ovs-vsctl add-port br-int vnet1 -- set Interface vnet1 type=internal ovs-vsctl add-port br-int vnet2 -- set Interface vnet2 type=internal # 添加三个netns ip netns add ns0 ip netns add ns1 ip netns add ns2 # 将内部端口分别移动到netns中 ip link set vnet0 netns ns0 ip link set vnet1 netns ns1 ip link set vnet2 netns ns2 # 启动端口并配置IP ip netns exec ns0 ip link set lo up ip netns exec ns0 ip link set vnet0 up ip netns exec ns0 ip addr add 10.</description>
    </item>
    
    <item>
      <title>Open vSwitch 入门实践（1）Open vSwitch 是什么</title>
      <link>http://www.example.com/posts/ovs-learn-1/</link>
      <pubDate>Wed, 25 Nov 2020 17:49:00 +0000</pubDate>
      
      <guid>http://www.example.com/posts/ovs-learn-1/</guid>
      <description>OVS简介    Open vSwitch 是什么？    Open vSwitch(以下简称OVS)是一个用C语言开发的多层虚拟交换机，使用Apcahe 2开源许可证，现如今基本上已经成为了开源SDN（软件定义网络）基础设施层的事实标准。
OVS支持哪些功能？     支持NetFlow、sFlow(R)、IPFIX、SPAN、RSPAN和GRE隧道镜像等多种流量监控协议 支持LACP (IEEE 802.1AX-2008) 支持标准802.1Q VLAN协议，允许端口配置trunk模式 支持组播 支持BFD和802.1ag链路监控 支持STP（IEEE 802.1D-1998）和RSTP（IEEE 802.1D-2004） 支持细粒度的QoS（服务质量）配置 支持HFSC qdisc 支持接管每一个虚拟机的流量 支持基于源MAC的负载均衡、主备模式和L4哈希的端口绑带 支持OpenFlow协议（包含了很多对虚拟化的扩展） 支持IPv6 支持多种隧道协议（GRE、VXLAN、STT、Geneve和IPsec） 支持C和Python的远程配置协议 支持内核和用户空间的转发引擎选项 具有流缓存引擎的多表转发管道 转发层抽象以简化向新软件和硬件平台的移植  OVS的术语解释    Bridge    中文名称网桥，一个Bridge代表一个以太网交换机（Switch），一台主机中可以创建一个或多个Bridge，Bridge可以根据一定的规则，把某一个端口接收到的数据报文转发到另一个或多个端口上，也可以修改或者丢弃数据报文。
Port    中文名称端口，需要注意的是它和TCP里面的端口不是同样的概念，它更像是物理交换机上面的插口，可以接水晶头的那种。Port隶属于Bridge，必须先添加了Bridge才能在Bridge上添加Port。Port有以下几种类型：
  Normal
用户可以把操作系统中已有的网卡添加到Open vSwicth上，Open vSwitct会自动生成一个同名的Port开处理这张网卡进和出的数据报文。
 不过需要注意的是这种方式添加的Port不支持分配IP地址，如果之前网卡上配置的有IP，挂载到OVS上面之后将不可访问。此类型的Port常用于VLAN模式的多台物理主机相连的那个口，交换机一端属于Trunk模式。
   Internal
当Port的类型是Internal时，OVS会自动创建一个虚拟网卡（Interface），此端口收到的数据报文都会转发给这块网卡，从这块网卡发出的数据报文也会通过Port交给OVS处理。当OVS创建一个新的网桥时，会自动创建一个与网桥同名的Internal Port，同时也会创建一个与网桥同名的Interface，因此可以通过ip命令在操作系统中查看到这张虚拟网卡，但是状态是down的。</description>
    </item>
    
  </channel>
</rss>
